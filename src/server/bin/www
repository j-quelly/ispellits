#!/usr/bin/env node

// dependencies
import http from 'http';
import debug from 'debug';
import APP from '../server';

debug('ispellits-app:server');

// create HTTP server
const SERVER = http.createServer(APP);

 // Normalize a port into a number, string, or false.
const normalizePort = function normalizePort(val) {
  const PORT_FIX = parseInt(val, 10);

  if (isNaN(PORT_FIX)) {
    // named pipe
    return val;
  }

  if (PORT_FIX >= 0) {
    // port number
    return PORT_FIX;
  }

  return false;
};

// Get port from environment and store in Express.
const PORT = normalizePort(process.env.PORT || 3001);
APP.set('port', PORT);

// Event listener for HTTP server "error" event.
const onError = function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const BIND = typeof PORT === 'string'
    ? `Pipe ${PORT}`
    : `Port ${PORT}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${BIND} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${BIND} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

// Event listener for HTTP server "listening" event.
const onListening = function onListening() {
  const ADDR = SERVER.address();
  const BIND = typeof ADDR === 'string'
    ? `pipe ${ADDR}`
    : `port ${ADDR.port}`;
  debug(`Listening on ${BIND}`);
};

// Listen on provided port, on all network interfaces.
SERVER.listen(PORT);
SERVER.on('error', onError);
SERVER.on('listening', onListening);

export default SERVER;
